"""Узнаем, как можно сделать, чтобы у всех экземпляров класса было одинаковое состояние.
Это называется паттерн моносостояния"""


#
# class Cat:
#     breed = 'pers'
#
# a = Cat()
# b = Cat( )

# Сделаем так, чтобы при изменении одного атрибута, это затрагивало другие экземпляры класса.
# Для этого нужно создать private переменную __shared_attr

class Cat:
    __shared_attr = {
        'breed': 'pers',
        'color': 'black'
    }
    # теперь при каждой инициализации объекта мы будем подменять
    # каждому экземпляру нашу переменную dict

    def __init__(self):
        self.__dict__ = Cat.__shared_attr

# Теперь при изменении атрибута или добавлении нового, это коснется всех экземпляров класса

d = Cat()
g = Cat()
q = Cat()
h = Cat()
d.breed = 'siam'
print(g.breed)
print(q.breed)
print(h.breed)
d.name = 'Bob'
q.color = 'red'
print(g.color)